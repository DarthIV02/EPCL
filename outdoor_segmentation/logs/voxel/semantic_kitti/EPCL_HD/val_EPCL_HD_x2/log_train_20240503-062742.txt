2024-05-03 06:27:42,517   INFO  **********************Start logging**********************
2024-05-03 06:27:42,518   INFO  CUDA_VISIBLE_DEVICES=ALL
2024-05-03 06:27:42,518   INFO  total_batch_size: 1
2024-05-03 06:27:42,518   INFO  total_lr: 0.020000
2024-05-03 06:27:42,518   INFO  cfg_file         tools/cfgs/voxel/semantic_kitti/EPCL_HD.yaml
2024-05-03 06:27:42,518   INFO  extra_tag        val_EPCL_HD_x2
2024-05-03 06:27:42,518   INFO  set_cfgs         None
2024-05-03 06:27:42,518   INFO  fix_random_seed  True
2024-05-03 06:27:42,518   INFO  exp              2
2024-05-03 06:27:42,518   INFO  batch_size       1
2024-05-03 06:27:42,518   INFO  epochs           48
2024-05-03 06:27:42,518   INFO  sync_bn          False
2024-05-03 06:27:42,518   INFO  ckp              None
2024-05-03 06:27:42,518   INFO  pretrained_model .//checkpoints/best_checkpoint.pth
2024-05-03 06:27:42,518   INFO  amp              False
2024-05-03 06:27:42,518   INFO  ckp_save_interval 1
2024-05-03 06:27:42,518   INFO  max_ckp_save_num 30
2024-05-03 06:27:42,518   INFO  merge_all_iters_to_one_epoch False
2024-05-03 06:27:42,518   INFO  eval             True
2024-05-03 06:27:42,518   INFO  train_hd         False
2024-05-03 06:27:42,518   INFO  eval_interval    50
2024-05-03 06:27:42,518   INFO  workers          1
2024-05-03 06:27:42,518   INFO  local_rank       0
2024-05-03 06:27:42,518   INFO  launcher         pytorch
2024-05-03 06:27:42,518   INFO  tcp_port         18888
2024-05-03 06:27:42,518   INFO  cfg.ROOT_DIR: /home/EPCL/outdoor_segmentation
2024-05-03 06:27:42,518   INFO  cfg.LOCAL_RANK: 0
2024-05-03 06:27:42,519   INFO  cfg.MODALITY: voxel
2024-05-03 06:27:42,519   INFO  
cfg.DATA = edict()
2024-05-03 06:27:42,519   INFO  cfg.DATA.DATASET: semantickitti
2024-05-03 06:27:42,519   INFO  cfg.DATA.PETRELOSS_CONFIG: None
2024-05-03 06:27:42,519   INFO  cfg.DATA.DATA_PATH: ../../../../root/dataset-kitti/dataset/sequences/
2024-05-03 06:27:42,519   INFO  cfg.DATA.VOXEL_SIZE: 0.05
2024-05-03 06:27:42,519   INFO  cfg.DATA.AUGMENT: GlobalAugment_LP
2024-05-03 06:27:42,519   INFO  cfg.DATA.NUM_POINTS: 1000000
2024-05-03 06:27:42,519   INFO  cfg.DATA.TRAINVAL: False
2024-05-03 06:27:42,519   INFO  cfg.DATA.TTA: False
2024-05-03 06:27:42,519   INFO  cfg.DATA.SAMPLES_PER_EPOCH: 19130
2024-05-03 06:27:42,519   INFO  
cfg.MODEL = edict()
2024-05-03 06:27:42,519   INFO  cfg.MODEL.NAME: EPCLOutdoorSegHD
2024-05-03 06:27:42,519   INFO  cfg.MODEL.IGNORE_LABEL: 0
2024-05-03 06:27:42,519   INFO  cfg.MODEL.IN_FEATURE_DIM: 4
2024-05-03 06:27:42,519   INFO  cfg.MODEL.BLOCK: ResBlock
2024-05-03 06:27:42,519   INFO  cfg.MODEL.NUM_LAYER: [2, 3, 4, 6, 2, 2, 2, 2]
2024-05-03 06:27:42,519   INFO  cfg.MODEL.PLANES: [32, 32, 64, 128, 256, 256, 128, 96, 96]
2024-05-03 06:27:42,519   INFO  cfg.MODEL.cr: 1.6
2024-05-03 06:27:42,519   INFO  cfg.MODEL.DROPOUT_P: 0.0
2024-05-03 06:27:42,519   INFO  cfg.MODEL.LABEL_SMOOTHING: 0.0
2024-05-03 06:27:42,519   INFO  cfg.MODEL.IF_DIST: False
2024-05-03 06:27:42,519   INFO  
cfg.MODEL.EPCL = edict()
2024-05-03 06:27:42,519   INFO  cfg.MODEL.EPCL.ENC_DIM: 768
2024-05-03 06:27:42,519   INFO  cfg.MODEL.EPCL.TOKENIZER_DIM: 409
2024-05-03 06:27:42,519   INFO  cfg.MODEL.EPCL.NUM_GROUP: 512
2024-05-03 06:27:42,519   INFO  cfg.MODEL.EPCL.GROUP_SIZE: 16
2024-05-03 06:27:42,519   INFO  cfg.MODEL.EPCL.VOXEL_SIZE: 0.05
2024-05-03 06:27:42,519   INFO  
cfg.OPTIM = edict()
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.BATCH_SIZE_PER_GPU: 1
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.NUM_EPOCHS: 48
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.OPTIMIZER: sgd
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.LR_PER_SAMPLE: 0.02
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.WEIGHT_DECAY: 0.0001
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.MOMENTUM: 0.9
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.NESTEROV: True
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.GRAD_NORM_CLIP: 10
2024-05-03 06:27:42,519   INFO  cfg.OPTIM.SCHEDULER: linear_warmup_with_cosdecay
2024-05-03 06:27:42,520   INFO  cfg.OPTIM.WARMUP_EPOCH: 1
2024-05-03 06:27:42,520   INFO  cfg.OPTIM.LR: 0.02
2024-05-03 06:27:42,520   INFO  cfg.TAG: EPCL_HD
2024-05-03 06:27:42,520   INFO  cfg.EXP_GROUP_PATH: voxel/semantic_kitti
2024-05-03 06:29:02,854   INFO  ==> Loading parameters from checkpoint .//checkpoints/best_checkpoint.pth to CPU
2024-05-03 06:29:04,014   INFO  ==> Done <All keys matched successfully>
2024-05-03 06:29:04,037   INFO  EPCLOutdoorSegHD(
  (stem): Sequential(
    (0): Conv3d(4, 51, kernel_size=(3, 3, 3), bias=False)
    (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
    (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
  )
  (stage1): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage2): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(51, 102, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage3): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(102, 204, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage4): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(204, 409, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (5): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (6): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (up1): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(613, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(613, 409, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up2): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(306, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(306, 204, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up3): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up4): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(153, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (classifier): Sequential(
    (0): Linear(in_features=766, out_features=20, bias=True)
  )
  (dropout): Dropout(p=0.0, inplace=True)
  (criterion_losses): Losses(
    (ell_loss): ELLLoss()
    (dice_loss_v0): DiceLossV0()
    (dice_loss_v1): DiceLossV1()
    (wce_loss): WeightedCrossEntropyLoss()
    (ce_loss): CrossEntropyLoss()
    (focalloss): FocalLoss()
    (eqlv2): EQLv2()
    (groupsoftmax): GroupSoftmax()
    (groupsoftmax_fgbg): GroupSoftmax_fgbg_2()
  )
  (epcl_encoder): EPCLEncoder(
    (tokenizer): EPCLPreEncoder(
      (group_divider): SparseGroup()
      (encoder): EmbeddingEncoder(
        (first_conv): Sequential(
          (0): Conv1d(409, 128, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (second_conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(512, 768, kernel_size=(1,), stride=(1,))
        )
      )
    )
    (encoder): ClipTransformer(
      (pos_embed): Sequential(
        (0): Linear(in_features=3, out_features=128, bias=True)
        (1): GELU(approximate='none')
        (2): Linear(in_features=128, out_features=768, bias=True)
      )
      (te_encoder): TaskEmbEncoder(
        (embedding): Embedding(20, 768)
        (trans): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): GELU(approximate='none')
          (2): Linear(in_features=768, out_features=768, bias=True)
        )
      )
      (blocks): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (upsamping): PointNetFeaturePropagation(
      (mlp_convs): ModuleList(
        (0): Conv1d(768, 409, kernel_size=(1,), stride=(1,))
      )
      (mlp_bns): ModuleList(
        (0): BatchNorm1d(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
)
2024-05-03 06:29:04,042   INFO  Model parameters: 183.956 M
2024-05-03 06:29:04,968   INFO  *************** TRAINED EPOCH 0 val EVALUATION *****************
2024-05-03 07:45:27,716   INFO  Validation per class iou: 
2024-05-03 07:45:27,718   INFO  +-------------------------+
|      Validation iou     |
+---------------+---------+
| Classes       | IoU     |
+---------------+---------+
| All           | 61.3151 |
| car           | 97.7063 |
| bicycle       | 44.5581 |
| motorcycle    | 61.9573 |
| truck         | 22.7182 |
| other-vehicle | 46.0436 |
| person        | 65.6727 |
| bicyclist     | 75.1596 |
| motorcyclist  | 24.1213 |
| road          | 91.8205 |
| parking       | 53.4684 |
| sidewalk      | 79.3288 |
| other-ground  | 0.5329  |
| building      | 91.7958 |
| fence         | 59.844  |
| vegetation    | 88.2205 |
| trunk         | 71.3103 |
| terrain       | 76.5881 |
| pole          | 62.7678 |
| traffic-sign  | 51.3733 |
+---------------+---------+
2024-05-03 07:45:27,725   INFO  +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                    Confusion matrix                                                                                                                    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| Classes       | car     | bicycle | motorcycle | truck   | other-vehicle | person  | bicyclist | motorcyclist | road    | parking | sidewalk | other-ground | building | fence   | vegetation | trunk   | terrain | pole    | traffic-sign | Points    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| car           | 99.0089 | 0.0055  | 0.01       | 0.0881  | 0.1253        | 0.0166  | 0.002     | 0.0004       | 0.1372  | 0.436   | 0.1372   | 0.0013       | 0.0032   | 0.0075  | 0.0037     | 0.0004  | 0.0102  | 0.0048  | 0.0016       | 30803382  |
| bicycle       | 0.5883  | 86.8269 | 2.0987     | 0.0354  | 0.5106        | 0.1349  | 0.0973    | 0.0004       | 0.0013  | 0.0145  | 0.6352   | 0.0226       | 1.2193   | 3.5784  | 3.0895     | 0.0995  | 0.9768  | 0.0517  | 0.0188       | 234242    |
| motorcycle    | 0.5146  | 0.0904  | 97.4198    | 0.3657  | 0.2417        | 0.1577  | 0.0099    | 0.0038       | 0.2551  | 0.0685  | 0.081    | 0.0082       | 0.0272   | 0.1264  | 0.4254     | 0.053   | 0.141   | 0.0047  | 0.0059       | 341798    |
| truck         | 0.4385  | 0.0048  | 0.3857     | 65.8498 | 32.8638       | 0.1459  | 0.0014    | 0.0026       | 0.0294  | 0.0165  | 0.0893   | 0.0062       | 0.0829   | 0.0006  | 0.0469     | 0.0     | 0.0002  | 0.0008  | 0.0348       | 503046    |
| other-vehicle | 1.8716  | 0.2319  | 0.721      | 36.3375 | 58.2565       | 0.1351  | 0.0187    | 0.0004       | 0.0629  | 0.1389  | 0.2954   | 0.0262       | 0.9754   | 0.4827  | 0.3266     | 0.0083  | 0.0881  | 0.0082  | 0.0146       | 2192404   |
| person        | 0.1075  | 0.0307  | 0.1009     | 0.0687  | 0.0719        | 96.002  | 0.4915    | 0.1109       | 0.0441  | 0.0058  | 0.2887   | 0.02         | 0.7851   | 0.0516  | 1.6049     | 0.1102  | 0.0484  | 0.0456  | 0.0117       | 469006    |
| bicyclist     | 0.0281  | 0.0583  | 0.0304     | 0.0049  | 0.0275        | 1.3391  | 97.3837   | 0.1872       | 0.8229  | 0.0016  | 0.0354   | 0.0046       | 0.0      | 0.0003  | 0.0432     | 0.0115  | 0.0046  | 0.0134  | 0.0033       | 305510    |
| motorcyclist  | 0.0742  | 0.153   | 13.8837    | 0.0417  | 0.0324        | 15.6036 | 19.5578   | 45.7491      | 0.0     | 0.0     | 2.3827   | 0.0          | 0.0139   | 0.0788  | 2.0582     | 0.3709  | 0.0     | 0.0     | 0.0          | 21572     |
| road          | 0.2833  | 0.0003  | 0.0055     | 0.0223  | 0.0115        | 0.0129  | 0.0119    | 0.0002       | 93.2399 | 0.7775  | 4.6599   | 0.0806       | 0.0003   | 0.0021  | 0.0091     | 0.0032  | 0.8769  | 0.0001  | 0.0027       | 87773800  |
| parking       | 0.314   | 0.0002  | 0.1312     | 0.0543  | 0.0467        | 0.0067  | 0.0001    | 0.0001       | 5.6855  | 65.7701 | 21.4586  | 0.45         | 0.0425   | 0.0312  | 0.221      | 0.0383  | 5.7487  | 0.0007  | 0.0003       | 5925637   |
| sidewalk      | 0.0575  | 0.11    | 0.0115     | 0.0052  | 0.0222        | 0.046   | 0.0014    | 0.0013       | 1.3137  | 0.648   | 91.0853  | 0.4617       | 0.3453   | 1.3709  | 0.2884     | 0.0038  | 4.1263  | 0.1011  | 0.0005       | 59879309  |
| other-ground  | 0.0088  | 0.0091  | 0.0078     | 0.0208  | 0.3464        | 0.0073  | 0.0       | 0.0          | 20.8052 | 0.2406  | 24.7934  | 1.3215       | 2.7713   | 0.9013  | 15.3492    | 0.0015  | 33.4117 | 0.002   | 0.002        | 408177    |
| building      | 0.0304  | 0.0258  | 0.0103     | 0.0956  | 0.3413        | 0.0674  | 0.0052    | 0.0003       | 0.0071  | 0.0006  | 0.1291   | 0.0287       | 96.6081  | 1.3044  | 1.1284     | 0.0606  | 0.1338  | 0.017   | 0.006        | 54882052  |
| fence         | 0.0296  | 0.033   | 0.0076     | 0.0565  | 0.3094        | 0.022   | 0.0011    | 0.0001       | 0.0025  | 0.002   | 0.4074   | 0.0223       | 12.8053  | 82.9494 | 2.51       | 0.0619  | 0.458   | 0.3124  | 0.0094       | 12277558  |
| vegetation    | 0.0249  | 0.077   | 0.083      | 0.0242  | 0.0719        | 0.0648  | 0.0425    | 0.0115       | 0.012   | 0.0066  | 0.6884   | 0.0372       | 0.5594   | 1.9788  | 92.2684    | 0.5476  | 3.3397  | 0.153   | 0.009        | 139738666 |
| trunk         | 0.0054  | 0.0068  | 0.2027     | 0.0998  | 0.225         | 0.3109  | 0.1548    | 0.0014       | 0.0022  | 0.0001  | 0.0064   | 0.1763       | 0.4011   | 0.2661  | 9.8628     | 87.2083 | 0.601   | 0.4603  | 0.0086       | 5262084   |
| terrain       | 0.009   | 0.0339  | 0.0183     | 0.0034  | 0.0101        | 0.0064  | 0.0006    | 0.0003       | 0.1267  | 0.229   | 3.5962   | 0.2361       | 0.3175   | 0.6034  | 7.3113     | 0.4223  | 87.0009 | 0.0741  | 0.0005       | 63013573  |
| pole          | 0.0249  | 0.0512  | 0.0378     | 0.0414  | 0.0831        | 0.2726  | 0.0018    | 0.0024       | 0.0009  | 0.0038  | 0.5541   | 0.0294       | 2.6017   | 0.8207  | 4.4315     | 5.5035  | 0.8288  | 82.5823 | 2.1282       | 1618202   |
| traffic-sign  | 0.1192  | 0.0471  | 0.3822     | 0.6524  | 0.6485        | 1.4336  | 0.0705    | 0.1476       | 0.0124  | 0.0019  | 0.0154   | 0.0017       | 2.672    | 0.4301  | 1.3083     | 0.8886  | 0.0135  | 31.8629 | 59.2919      | 363137    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
