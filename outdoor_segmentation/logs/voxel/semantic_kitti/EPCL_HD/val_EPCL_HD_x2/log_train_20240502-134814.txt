2024-05-02 13:48:14,770   INFO  **********************Start logging**********************
2024-05-02 13:48:14,770   INFO  CUDA_VISIBLE_DEVICES=ALL
2024-05-02 13:48:14,770   INFO  total_batch_size: 1
2024-05-02 13:48:14,770   INFO  total_lr: 0.020000
2024-05-02 13:48:14,770   INFO  cfg_file         tools/cfgs/voxel/semantic_kitti/EPCL_HD.yaml
2024-05-02 13:48:14,770   INFO  extra_tag        val_EPCL_HD_x2
2024-05-02 13:48:14,770   INFO  set_cfgs         None
2024-05-02 13:48:14,770   INFO  fix_random_seed  True
2024-05-02 13:48:14,770   INFO  exp              2
2024-05-02 13:48:14,770   INFO  batch_size       1
2024-05-02 13:48:14,770   INFO  epochs           48
2024-05-02 13:48:14,770   INFO  sync_bn          False
2024-05-02 13:48:14,771   INFO  ckp              None
2024-05-02 13:48:14,771   INFO  pretrained_model .//checkpoints/best_checkpoint.pth
2024-05-02 13:48:14,771   INFO  amp              False
2024-05-02 13:48:14,771   INFO  ckp_save_interval 1
2024-05-02 13:48:14,771   INFO  max_ckp_save_num 30
2024-05-02 13:48:14,771   INFO  merge_all_iters_to_one_epoch False
2024-05-02 13:48:14,771   INFO  eval             True
2024-05-02 13:48:14,771   INFO  train_hd         False
2024-05-02 13:48:14,771   INFO  eval_interval    50
2024-05-02 13:48:14,771   INFO  workers          1
2024-05-02 13:48:14,771   INFO  local_rank       0
2024-05-02 13:48:14,771   INFO  launcher         pytorch
2024-05-02 13:48:14,771   INFO  tcp_port         18888
2024-05-02 13:48:14,771   INFO  cfg.ROOT_DIR: /home/EPCL/outdoor_segmentation
2024-05-02 13:48:14,771   INFO  cfg.LOCAL_RANK: 0
2024-05-02 13:48:14,771   INFO  cfg.MODALITY: voxel
2024-05-02 13:48:14,771   INFO  
cfg.DATA = edict()
2024-05-02 13:48:14,771   INFO  cfg.DATA.DATASET: semantickitti
2024-05-02 13:48:14,771   INFO  cfg.DATA.PETRELOSS_CONFIG: None
2024-05-02 13:48:14,771   INFO  cfg.DATA.DATA_PATH: ../../../../root/dataset-kitti/dataset/sequences/
2024-05-02 13:48:14,771   INFO  cfg.DATA.VOXEL_SIZE: 0.05
2024-05-02 13:48:14,771   INFO  cfg.DATA.AUGMENT: GlobalAugment_LP
2024-05-02 13:48:14,771   INFO  cfg.DATA.NUM_POINTS: 1000000
2024-05-02 13:48:14,771   INFO  cfg.DATA.TRAINVAL: False
2024-05-02 13:48:14,771   INFO  cfg.DATA.TTA: False
2024-05-02 13:48:14,771   INFO  cfg.DATA.SAMPLES_PER_EPOCH: 1913
2024-05-02 13:48:14,771   INFO  
cfg.MODEL = edict()
2024-05-02 13:48:14,771   INFO  cfg.MODEL.NAME: EPCLOutdoorSegHD
2024-05-02 13:48:14,771   INFO  cfg.MODEL.IGNORE_LABEL: 0
2024-05-02 13:48:14,771   INFO  cfg.MODEL.IN_FEATURE_DIM: 4
2024-05-02 13:48:14,771   INFO  cfg.MODEL.BLOCK: ResBlock
2024-05-02 13:48:14,771   INFO  cfg.MODEL.NUM_LAYER: [2, 3, 4, 6, 2, 2, 2, 2]
2024-05-02 13:48:14,771   INFO  cfg.MODEL.PLANES: [32, 32, 64, 128, 256, 256, 128, 96, 96]
2024-05-02 13:48:14,771   INFO  cfg.MODEL.cr: 1.6
2024-05-02 13:48:14,771   INFO  cfg.MODEL.DROPOUT_P: 0.0
2024-05-02 13:48:14,771   INFO  cfg.MODEL.LABEL_SMOOTHING: 0.0
2024-05-02 13:48:14,772   INFO  cfg.MODEL.IF_DIST: False
2024-05-02 13:48:14,772   INFO  
cfg.MODEL.EPCL = edict()
2024-05-02 13:48:14,772   INFO  cfg.MODEL.EPCL.ENC_DIM: 768
2024-05-02 13:48:14,772   INFO  cfg.MODEL.EPCL.TOKENIZER_DIM: 409
2024-05-02 13:48:14,772   INFO  cfg.MODEL.EPCL.NUM_GROUP: 512
2024-05-02 13:48:14,772   INFO  cfg.MODEL.EPCL.GROUP_SIZE: 16
2024-05-02 13:48:14,772   INFO  cfg.MODEL.EPCL.VOXEL_SIZE: 0.05
2024-05-02 13:48:14,772   INFO  
cfg.OPTIM = edict()
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.BATCH_SIZE_PER_GPU: 1
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.NUM_EPOCHS: 48
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.OPTIMIZER: sgd
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.LR_PER_SAMPLE: 0.02
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.WEIGHT_DECAY: 0.0001
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.MOMENTUM: 0.9
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.NESTEROV: True
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.GRAD_NORM_CLIP: 10
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.SCHEDULER: linear_warmup_with_cosdecay
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.WARMUP_EPOCH: 1
2024-05-02 13:48:14,772   INFO  cfg.OPTIM.LR: 0.02
2024-05-02 13:48:14,772   INFO  cfg.TAG: EPCL_HD
2024-05-02 13:48:14,772   INFO  cfg.EXP_GROUP_PATH: voxel/semantic_kitti
2024-05-02 13:49:29,449   INFO  ==> Loading parameters from checkpoint .//checkpoints/best_checkpoint.pth to CPU
2024-05-02 13:49:30,604   INFO  ==> Done <All keys matched successfully>
2024-05-02 13:49:30,633   INFO  EPCLOutdoorSegHD(
  (stem): Sequential(
    (0): Conv3d(4, 51, kernel_size=(3, 3, 3), bias=False)
    (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
    (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
  )
  (stage1): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage2): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(51, 102, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage3): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(102, 204, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage4): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(204, 409, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (5): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (6): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (up1): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(613, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(613, 409, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up2): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(306, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(306, 204, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up3): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up4): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(153, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (classifier): Sequential(
    (0): Linear(in_features=766, out_features=20, bias=True)
  )
  (dropout): Dropout(p=0.0, inplace=True)
  (criterion_losses): Losses(
    (ell_loss): ELLLoss()
    (dice_loss_v0): DiceLossV0()
    (dice_loss_v1): DiceLossV1()
    (wce_loss): WeightedCrossEntropyLoss()
    (ce_loss): CrossEntropyLoss()
    (focalloss): FocalLoss()
    (eqlv2): EQLv2()
    (groupsoftmax): GroupSoftmax()
    (groupsoftmax_fgbg): GroupSoftmax_fgbg_2()
  )
  (epcl_encoder): EPCLEncoder(
    (tokenizer): EPCLPreEncoder(
      (group_divider): SparseGroup()
      (encoder): EmbeddingEncoder(
        (first_conv): Sequential(
          (0): Conv1d(409, 128, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (second_conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(512, 768, kernel_size=(1,), stride=(1,))
        )
      )
    )
    (encoder): ClipTransformer(
      (pos_embed): Sequential(
        (0): Linear(in_features=3, out_features=128, bias=True)
        (1): GELU(approximate='none')
        (2): Linear(in_features=128, out_features=768, bias=True)
      )
      (te_encoder): TaskEmbEncoder(
        (embedding): Embedding(20, 768)
        (trans): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): GELU(approximate='none')
          (2): Linear(in_features=768, out_features=768, bias=True)
        )
      )
      (blocks): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (upsamping): PointNetFeaturePropagation(
      (mlp_convs): ModuleList(
        (0): Conv1d(768, 409, kernel_size=(1,), stride=(1,))
      )
      (mlp_bns): ModuleList(
        (0): BatchNorm1d(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
)
2024-05-02 13:49:30,637   INFO  Model parameters: 183.956 M
2024-05-02 13:49:31,869   INFO  *************** TRAINED EPOCH 0 val EVALUATION *****************
2024-05-02 15:04:05,592   INFO  Validation per class iou: 
2024-05-02 15:04:05,594   INFO  +-------------------------+
|      Validation iou     |
+---------------+---------+
| Classes       | IoU     |
+---------------+---------+
| All           | 59.9095 |
| car           | 97.8251 |
| bicycle       | 41.6284 |
| motorcycle    | 59.5071 |
| truck         | 19.384  |
| other-vehicle | 47.2854 |
| person        | 65.2805 |
| bicyclist     | 57.0595 |
| motorcyclist  | 16.3345 |
| road          | 92.4924 |
| parking       | 56.592  |
| sidewalk      | 79.6676 |
| other-ground  | 0.2184  |
| building      | 92.0788 |
| fence         | 60.5212 |
| vegetation    | 88.438  |
| trunk         | 71.7087 |
| terrain       | 76.5313 |
| pole          | 63.823  |
| traffic-sign  | 51.9056 |
+---------------+---------+
2024-05-02 15:04:05,602   INFO  +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                    Confusion matrix                                                                                                                    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| Classes       | car     | bicycle | motorcycle | truck   | other-vehicle | person  | bicyclist | motorcyclist | road    | parking | sidewalk | other-ground | building | fence   | vegetation | trunk   | terrain | pole    | traffic-sign | Points    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| car           | 99.1575 | 0.0049  | 0.0098     | 0.0943  | 0.0703        | 0.0153  | 0.0028    | 0.0006       | 0.2281  | 0.2597  | 0.13     | 0.0002       | 0.0029   | 0.0064  | 0.0033     | 0.0004  | 0.0094  | 0.0034  | 0.0009       | 30805205  |
| bicycle       | 0.5447  | 87.6963 | 2.1152     | 0.003   | 0.4445        | 0.1304  | 0.1274    | 0.0009       | 0.0022  | 0.0163  | 0.7646   | 0.0          | 1.0528   | 3.4025  | 2.6852     | 0.1132  | 0.8532  | 0.0379  | 0.0099       | 232418    |
| motorcycle    | 0.5272  | 0.1002  | 97.6038    | 0.1518  | 0.3552        | 0.1556  | 0.0111    | 0.0053       | 0.3177  | 0.051   | 0.0862   | 0.0006       | 0.0155   | 0.0865  | 0.3514     | 0.0337  | 0.1413  | 0.0018  | 0.0041       | 341212    |
| truck         | 0.6577  | 0.0052  | 0.4591     | 51.2875 | 47.0323       | 0.1854  | 0.0056    | 0.0032       | 0.073   | 0.0177  | 0.1134   | 0.0032       | 0.0799   | 0.0006  | 0.0498     | 0.0002  | 0.0024  | 0.0008  | 0.0229       | 501602    |
| other-vehicle | 2.0792  | 0.2508  | 0.7638     | 33.6183 | 60.6705       | 0.1499  | 0.0238    | 0.0005       | 0.0994  | 0.1402  | 0.3387   | 0.0066       | 0.9848   | 0.4489  | 0.3154     | 0.0078  | 0.0857  | 0.0079  | 0.008        | 2186642   |
| person        | 0.0987  | 0.0325  | 0.1098     | 0.0441  | 0.0392        | 96.3524 | 0.6036    | 0.1278       | 0.0531  | 0.0051  | 0.3385   | 0.0024       | 0.6211   | 0.0542  | 1.3269     | 0.0964  | 0.0439  | 0.0398  | 0.0105       | 467045    |
| bicyclist     | 0.0301  | 0.0604  | 0.0346     | 0.0029  | 0.0199        | 1.3018  | 97.3589   | 0.2052       | 0.8776  | 0.0013  | 0.0422   | 0.0          | 0.0      | 0.0003  | 0.032      | 0.0124  | 0.0049  | 0.0134  | 0.002        | 306046    |
| motorcyclist  | 0.0506  | 0.069   | 13.1683    | 0.0506  | 0.0           | 14.8615 | 20.8567   | 46.6412      | 0.0     | 0.0     | 2.3558   | 0.0          | 0.0046   | 0.0874  | 1.5506     | 0.3037  | 0.0     | 0.0     | 0.0          | 21734     |
| road          | 0.29    | 0.0003  | 0.0038     | 0.0045  | 0.0182        | 0.0116  | 0.0127    | 0.0003       | 94.1218 | 0.2614  | 4.394    | 0.0208       | 0.0003   | 0.0033  | 0.014      | 0.0034  | 0.8394  | 0.0001  | 0.0003       | 87906683  |
| parking       | 0.3818  | 0.0002  | 0.1333     | 0.0178  | 0.0664        | 0.0067  | 0.0003    | 0.0001       | 6.5157  | 63.8239 | 22.472   | 0.0468       | 0.0384   | 0.0286  | 0.2611     | 0.0348  | 6.1714  | 0.0006  | 0.0002       | 5936910   |
| sidewalk      | 0.0665  | 0.1013  | 0.0111     | 0.0014  | 0.0203        | 0.0426  | 0.0017    | 0.0014       | 1.4276  | 0.5338  | 91.2631  | 0.2941       | 0.3325   | 1.3067  | 0.3616     | 0.0036  | 4.1511  | 0.0795  | 0.0002       | 60033186  |
| other-ground  | 0.0105  | 0.0087  | 0.0077     | 0.0124  | 0.3184        | 0.007   | 0.0007    | 0.0007       | 22.3142 | 0.1802  | 26.1269  | 0.3399       | 2.2699   | 1.0343  | 15.1477    | 0.0     | 32.2176 | 0.0016  | 0.0014       | 426844    |
| building      | 0.0264  | 0.0253  | 0.0114     | 0.057   | 0.325         | 0.0672  | 0.0077    | 0.0006       | 0.0088  | 0.0009  | 0.1569   | 0.0048       | 96.9146  | 1.1446  | 1.0551     | 0.0513  | 0.1227  | 0.0154  | 0.0042       | 54498295  |
| fence         | 0.0291  | 0.0327  | 0.0079     | 0.0248  | 0.3075        | 0.0198  | 0.0021    | 0.0002       | 0.0043  | 0.0023  | 0.4335   | 0.0038       | 13.7409  | 81.9087 | 2.6908     | 0.0631  | 0.4516  | 0.2684  | 0.0085       | 12254590  |
| vegetation    | 0.018   | 0.1061  | 0.0975     | 0.01    | 0.0652        | 0.0711  | 0.1259    | 0.0257       | 0.0157  | 0.0052  | 0.6468   | 0.0045       | 0.4936   | 1.7659  | 92.8075    | 0.55    | 3.0478  | 0.1358  | 0.0077       | 139240590 |
| trunk         | 0.0043  | 0.0118  | 0.2431     | 0.0701  | 0.1882        | 0.3239  | 0.2636    | 0.0028       | 0.0054  | 0.0004  | 0.0098   | 0.0293       | 0.3728   | 0.2759  | 9.646      | 87.4755 | 0.6486  | 0.4206  | 0.0081       | 5260079   |
| terrain       | 0.0089  | 0.0331  | 0.0187     | 0.0012  | 0.0097        | 0.0066  | 0.0013    | 0.0012       | 0.1665  | 0.1842  | 3.6893   | 0.0456       | 0.2823   | 0.6382  | 8.016      | 0.4026  | 86.4299 | 0.064   | 0.0004       | 63053405  |
| pole          | 0.025   | 0.0652  | 0.0473     | 0.0186  | 0.0899        | 0.2772  | 0.0044    | 0.0045       | 0.0016  | 0.004   | 0.6869   | 0.0042       | 2.6854   | 0.9781  | 4.7311     | 5.5222  | 0.8592  | 81.8256 | 2.1697       | 1618474   |
| traffic-sign  | 0.1163  | 0.0681  | 0.4891     | 0.5572  | 0.6666        | 1.4647  | 0.1113    | 0.1963       | 0.039   | 0.0022  | 0.0293   | 0.0003       | 2.7275   | 0.4177  | 1.2867     | 0.9379  | 0.0133  | 31.6494 | 59.2271      | 361245    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
