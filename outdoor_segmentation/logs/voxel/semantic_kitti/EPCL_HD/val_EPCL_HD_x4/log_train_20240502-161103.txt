2024-05-02 16:11:03,737   INFO  **********************Start logging**********************
2024-05-02 16:11:03,737   INFO  CUDA_VISIBLE_DEVICES=ALL
2024-05-02 16:11:03,737   INFO  total_batch_size: 1
2024-05-02 16:11:03,738   INFO  total_lr: 0.020000
2024-05-02 16:11:03,738   INFO  cfg_file         tools/cfgs/voxel/semantic_kitti/EPCL_HD.yaml
2024-05-02 16:11:03,738   INFO  extra_tag        val_EPCL_HD_x4
2024-05-02 16:11:03,738   INFO  set_cfgs         None
2024-05-02 16:11:03,738   INFO  fix_random_seed  True
2024-05-02 16:11:03,738   INFO  exp              4
2024-05-02 16:11:03,738   INFO  batch_size       1
2024-05-02 16:11:03,738   INFO  epochs           48
2024-05-02 16:11:03,738   INFO  sync_bn          False
2024-05-02 16:11:03,738   INFO  ckp              None
2024-05-02 16:11:03,738   INFO  pretrained_model .//checkpoints/best_checkpoint.pth
2024-05-02 16:11:03,738   INFO  amp              False
2024-05-02 16:11:03,738   INFO  ckp_save_interval 1
2024-05-02 16:11:03,738   INFO  max_ckp_save_num 30
2024-05-02 16:11:03,738   INFO  merge_all_iters_to_one_epoch False
2024-05-02 16:11:03,738   INFO  eval             True
2024-05-02 16:11:03,738   INFO  train_hd         False
2024-05-02 16:11:03,738   INFO  eval_interval    50
2024-05-02 16:11:03,738   INFO  workers          1
2024-05-02 16:11:03,738   INFO  local_rank       0
2024-05-02 16:11:03,738   INFO  launcher         pytorch
2024-05-02 16:11:03,738   INFO  tcp_port         18888
2024-05-02 16:11:03,738   INFO  cfg.ROOT_DIR: /home/EPCL/outdoor_segmentation
2024-05-02 16:11:03,738   INFO  cfg.LOCAL_RANK: 0
2024-05-02 16:11:03,738   INFO  cfg.MODALITY: voxel
2024-05-02 16:11:03,738   INFO  
cfg.DATA = edict()
2024-05-02 16:11:03,738   INFO  cfg.DATA.DATASET: semantickitti
2024-05-02 16:11:03,739   INFO  cfg.DATA.PETRELOSS_CONFIG: None
2024-05-02 16:11:03,739   INFO  cfg.DATA.DATA_PATH: ../../../../root/dataset-kitti/dataset/sequences/
2024-05-02 16:11:03,739   INFO  cfg.DATA.VOXEL_SIZE: 0.05
2024-05-02 16:11:03,739   INFO  cfg.DATA.AUGMENT: GlobalAugment_LP
2024-05-02 16:11:03,739   INFO  cfg.DATA.NUM_POINTS: 1000000
2024-05-02 16:11:03,739   INFO  cfg.DATA.TRAINVAL: False
2024-05-02 16:11:03,739   INFO  cfg.DATA.TTA: False
2024-05-02 16:11:03,739   INFO  cfg.DATA.SAMPLES_PER_EPOCH: 19130
2024-05-02 16:11:03,739   INFO  
cfg.MODEL = edict()
2024-05-02 16:11:03,739   INFO  cfg.MODEL.NAME: EPCLOutdoorSegHD
2024-05-02 16:11:03,739   INFO  cfg.MODEL.IGNORE_LABEL: 0
2024-05-02 16:11:03,739   INFO  cfg.MODEL.IN_FEATURE_DIM: 4
2024-05-02 16:11:03,739   INFO  cfg.MODEL.BLOCK: ResBlock
2024-05-02 16:11:03,739   INFO  cfg.MODEL.NUM_LAYER: [2, 3, 4, 6, 2, 2, 2, 2]
2024-05-02 16:11:03,739   INFO  cfg.MODEL.PLANES: [32, 32, 64, 128, 256, 256, 128, 96, 96]
2024-05-02 16:11:03,739   INFO  cfg.MODEL.cr: 1.6
2024-05-02 16:11:03,739   INFO  cfg.MODEL.DROPOUT_P: 0.0
2024-05-02 16:11:03,739   INFO  cfg.MODEL.LABEL_SMOOTHING: 0.0
2024-05-02 16:11:03,739   INFO  cfg.MODEL.IF_DIST: False
2024-05-02 16:11:03,739   INFO  
cfg.MODEL.EPCL = edict()
2024-05-02 16:11:03,739   INFO  cfg.MODEL.EPCL.ENC_DIM: 768
2024-05-02 16:11:03,739   INFO  cfg.MODEL.EPCL.TOKENIZER_DIM: 409
2024-05-02 16:11:03,739   INFO  cfg.MODEL.EPCL.NUM_GROUP: 512
2024-05-02 16:11:03,739   INFO  cfg.MODEL.EPCL.GROUP_SIZE: 16
2024-05-02 16:11:03,739   INFO  cfg.MODEL.EPCL.VOXEL_SIZE: 0.05
2024-05-02 16:11:03,739   INFO  
cfg.OPTIM = edict()
2024-05-02 16:11:03,739   INFO  cfg.OPTIM.BATCH_SIZE_PER_GPU: 1
2024-05-02 16:11:03,739   INFO  cfg.OPTIM.NUM_EPOCHS: 48
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.OPTIMIZER: sgd
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.LR_PER_SAMPLE: 0.02
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.WEIGHT_DECAY: 0.0001
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.MOMENTUM: 0.9
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.NESTEROV: True
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.GRAD_NORM_CLIP: 10
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.SCHEDULER: linear_warmup_with_cosdecay
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.WARMUP_EPOCH: 1
2024-05-02 16:11:03,740   INFO  cfg.OPTIM.LR: 0.02
2024-05-02 16:11:03,740   INFO  cfg.TAG: EPCL_HD
2024-05-02 16:11:03,740   INFO  cfg.EXP_GROUP_PATH: voxel/semantic_kitti
2024-05-02 16:11:12,139   INFO  ==> Loading parameters from checkpoint .//checkpoints/best_checkpoint.pth to CPU
2024-05-02 16:11:15,883   INFO  ==> Done <All keys matched successfully>
2024-05-02 16:11:15,911   INFO  EPCLOutdoorSegHD(
  (stem): Sequential(
    (0): Conv3d(4, 51, kernel_size=(3, 3, 3), bias=False)
    (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
    (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
  )
  (stage1): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage2): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(51, 102, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage3): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(102, 204, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage4): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(204, 409, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (5): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (6): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (up1): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(613, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(613, 409, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up2): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(306, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(306, 204, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up3): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up4): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(153, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (classifier): Sequential(
    (0): Linear(in_features=766, out_features=20, bias=True)
  )
  (dropout): Dropout(p=0.0, inplace=True)
  (criterion_losses): Losses(
    (ell_loss): ELLLoss()
    (dice_loss_v0): DiceLossV0()
    (dice_loss_v1): DiceLossV1()
    (wce_loss): WeightedCrossEntropyLoss()
    (ce_loss): CrossEntropyLoss()
    (focalloss): FocalLoss()
    (eqlv2): EQLv2()
    (groupsoftmax): GroupSoftmax()
    (groupsoftmax_fgbg): GroupSoftmax_fgbg_2()
  )
  (epcl_encoder): EPCLEncoder(
    (tokenizer): EPCLPreEncoder(
      (group_divider): SparseGroup()
      (encoder): EmbeddingEncoder(
        (first_conv): Sequential(
          (0): Conv1d(409, 128, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (second_conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(512, 768, kernel_size=(1,), stride=(1,))
        )
      )
    )
    (encoder): ClipTransformer(
      (pos_embed): Sequential(
        (0): Linear(in_features=3, out_features=128, bias=True)
        (1): GELU(approximate='none')
        (2): Linear(in_features=128, out_features=768, bias=True)
      )
      (te_encoder): TaskEmbEncoder(
        (embedding): Embedding(20, 768)
        (trans): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): GELU(approximate='none')
          (2): Linear(in_features=768, out_features=768, bias=True)
        )
      )
      (blocks): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (upsamping): PointNetFeaturePropagation(
      (mlp_convs): ModuleList(
        (0): Conv1d(768, 409, kernel_size=(1,), stride=(1,))
      )
      (mlp_bns): ModuleList(
        (0): BatchNorm1d(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
)
2024-05-02 16:11:15,917   INFO  Model parameters: 183.956 M
2024-05-02 16:11:16,250   INFO  *************** TRAINED EPOCH 0 val EVALUATION *****************
2024-05-02 16:27:29,226   INFO  Validation per class iou: 
2024-05-02 16:27:29,228   INFO  +-------------------------+
|      Validation iou     |
+---------------+---------+
| Classes       | IoU     |
+---------------+---------+
| All           | 69.8243 |
| car           | 98.2732 |
| bicycle       | 54.3071 |
| motorcycle    | 74.0762 |
| truck         | 82.7429 |
| other-vehicle | 80.7057 |
| person        | 74.3515 |
| bicyclist     | 83.4263 |
| motorcyclist  | 29.3367 |
| road          | 93.8339 |
| parking       | 59.0993 |
| sidewalk      | 81.5043 |
| other-ground  | 0.4254  |
| building      | 93.1276 |
| fence         | 61.3769 |
| vegetation    | 89.0309 |
| trunk         | 73.1663 |
| terrain       | 77.9083 |
| pole          | 67.5114 |
| traffic-sign  | 52.4577 |
+---------------+---------+
2024-05-02 16:27:29,236   INFO  +-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                    Confusion matrix                                                                                                                   |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+--------+------------+---------+---------+---------+--------------+-----------+
| Classes       | car     | bicycle | motorcycle | truck   | other-vehicle | person  | bicyclist | motorcyclist | road    | parking | sidewalk | other-ground | building | fence  | vegetation | trunk   | terrain | pole    | traffic-sign | Points    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+--------+------------+---------+---------+---------+--------------+-----------+
| car           | 99.0144 | 0.0056  | 0.0084     | 0.04    | 0.2414        | 0.0118  | 0.005     | 0.0012       | 0.2437  | 0.2953  | 0.1091   | 0.0011       | 0.0058   | 0.0029 | 0.0068     | 0.0002  | 0.0045  | 0.0025  | 0.0004       | 30787932  |
| bicycle       | 0.3677  | 87.7826 | 1.946      | 0.0064  | 0.3399        | 0.1188  | 0.0551    | 0.0          | 0.0     | 0.0222  | 1.0192   | 0.0115       | 1.8721   | 3.2999 | 2.3265     | 0.0261  | 0.7811  | 0.0244  | 0.0004       | 233913    |
| motorcycle    | 0.4087  | 0.1233  | 98.231     | 0.047   | 0.3079        | 0.1507  | 0.0108    | 0.0111       | 0.0517  | 0.0222  | 0.0406   | 0.0          | 0.0386   | 0.0672 | 0.4026     | 0.0234  | 0.0599  | 0.0032  | 0.0          | 342289    |
| truck         | 0.0291  | 0.0004  | 0.0156     | 99.3884 | 0.2022        | 0.2419  | 0.0024    | 0.0024       | 0.0208  | 0.0026  | 0.0447   | 0.0053       | 0.0032   | 0.0    | 0.0065     | 0.0     | 0.0004  | 0.001   | 0.0332       | 505921    |
| other-vehicle | 1.2778  | 0.349   | 0.9729     | 2.1259  | 93.6918       | 0.1715  | 0.027     | 0.0003       | 0.0565  | 0.0875  | 0.1965   | 0.0023       | 0.4169   | 0.2575 | 0.3006     | 0.0022  | 0.0489  | 0.0058  | 0.0092       | 2181282   |
| person        | 0.0618  | 0.0421  | 0.0749     | 0.0206  | 0.0215        | 96.0815 | 0.4773    | 0.1882       | 0.0665  | 0.0082  | 0.2831   | 0.0172       | 2.0995   | 0.0457 | 0.3835     | 0.0328  | 0.0577  | 0.0346  | 0.0034       | 465971    |
| bicyclist     | 0.0255  | 0.048   | 0.0264     | 0.0042  | 0.0042        | 1.2871  | 97.8345   | 0.3032       | 0.4005  | 0.0013  | 0.0317   | 0.0          | 0.0      | 0.0    | 0.0173     | 0.0     | 0.0046  | 0.0114  | 0.0          | 306353    |
| motorcyclist  | 0.0137  | 0.761   | 11.8802    | 0.0365  | 0.0           | 19.9872 | 14.0129   | 49.9635      | 0.0     | 0.0     | 2.0598   | 0.0          | 0.0      | 0.0182 | 1.2623     | 0.0     | 0.0046  | 0.0     | 0.0          | 21944     |
| road          | 0.1585  | 0.0005  | 0.0116     | 0.0049  | 0.0218        | 0.0081  | 0.0289    | 0.0002       | 95.1527 | 0.2136  | 3.9762   | 0.0354       | 0.0      | 0.0014 | 0.0045     | 0.0017  | 0.3799  | 0.0001  | 0.0          | 87838850  |
| parking       | 0.2181  | 0.0004  | 0.227      | 0.0013  | 0.2801        | 0.0031  | 0.0001    | 0.0001       | 4.7778  | 67.6804 | 21.4895  | 0.0803       | 0.0159   | 0.0267 | 0.1702     | 0.0323  | 4.9966  | 0.0003  | 0.0          | 5923473   |
| sidewalk      | 0.0366  | 0.0685  | 0.0143     | 0.0027  | 0.0228        | 0.0299  | 0.0017    | 0.0013       | 1.1119  | 0.6626  | 92.6985  | 0.5882       | 0.1931   | 1.0243 | 0.3047     | 0.0026  | 3.1886  | 0.0475  | 0.0001       | 59932650  |
| other-ground  | 0.0051  | 0.008   | 0.007      | 0.0     | 0.3418        | 0.0022  | 0.0005    | 0.0          | 15.8733 | 0.3589  | 34.7117  | 0.9376       | 0.9373   | 0.2894 | 14.4617    | 0.0     | 32.0639 | 0.001   | 0.0007       | 414267    |
| building      | 0.0098  | 0.0243  | 0.0046     | 0.052   | 0.2291        | 0.0456  | 0.0027    | 0.0004       | 0.0063  | 0.0011  | 0.1604   | 0.0159       | 97.2036  | 1.0699 | 0.9719     | 0.022   | 0.1477  | 0.0169  | 0.016        | 55396295  |
| fence         | 0.0177  | 0.0374  | 0.0051     | 0.0072  | 0.1417        | 0.0109  | 0.0003    | 0.0002       | 0.0024  | 0.0018  | 0.4075   | 0.0102       | 9.4567   | 86.662 | 2.6745     | 0.0316  | 0.3966  | 0.1301  | 0.0061       | 12289281  |
| vegetation    | 0.0117  | 0.041   | 0.0214     | 0.0044  | 0.0441        | 0.0316  | 0.0108    | 0.0077       | 0.005   | 0.0056  | 0.4632   | 0.0146       | 0.6426   | 2.1595 | 92.9585    | 0.5391  | 2.9348  | 0.0944  | 0.0101       | 140872221 |
| trunk         | 0.0013  | 0.0028  | 0.0778     | 0.0058  | 0.0686        | 0.2035  | 0.0301    | 0.0013       | 0.0001  | 0.0002  | 0.0084   | 0.0163       | 0.1128   | 0.3131 | 10.217     | 87.6966 | 0.8585  | 0.3758  | 0.01         | 5310719   |
| terrain       | 0.0049  | 0.0236  | 0.016      | 0.0004  | 0.0138        | 0.0037  | 0.0006    | 0.0002       | 0.2069  | 0.2728  | 3.9336   | 0.124        | 0.2636   | 1.1905 | 7.0515     | 0.2905  | 86.5624 | 0.0408  | 0.0002       | 63046192  |
| pole          | 0.0135  | 0.0889  | 0.016      | 0.0066  | 0.0479        | 0.2535  | 0.0001    | 0.0039       | 0.0017  | 0.0044  | 0.4795   | 0.0125       | 2.0198   | 1.6211 | 5.0306     | 5.4238  | 0.8911  | 82.1286 | 1.9563       | 1608304   |
| traffic-sign  | 0.0114  | 0.0455  | 0.0114     | 0.0611  | 0.9266        | 1.3699  | 0.0656    | 0.2323       | 0.014   | 0.0003  | 0.0081   | 0.0039       | 1.8775   | 0.608  | 1.1321     | 0.9495  | 0.005   | 31.9445 | 60.7332      | 358196    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+--------+------------+---------+---------+---------+--------------+-----------+
