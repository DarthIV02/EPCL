2024-05-02 13:00:48,227   INFO  **********************Start logging**********************
2024-05-02 13:00:48,227   INFO  CUDA_VISIBLE_DEVICES=ALL
2024-05-02 13:00:48,227   INFO  total_batch_size: 1
2024-05-02 13:00:48,227   INFO  total_lr: 0.020000
2024-05-02 13:00:48,227   INFO  cfg_file         tools/cfgs/voxel/semantic_kitti/EPCL_HD.yaml
2024-05-02 13:00:48,227   INFO  extra_tag        val_EPCL_HD_x4
2024-05-02 13:00:48,227   INFO  set_cfgs         None
2024-05-02 13:00:48,227   INFO  fix_random_seed  True
2024-05-02 13:00:48,227   INFO  exp              4
2024-05-02 13:00:48,227   INFO  batch_size       1
2024-05-02 13:00:48,227   INFO  epochs           48
2024-05-02 13:00:48,228   INFO  sync_bn          False
2024-05-02 13:00:48,228   INFO  ckp              None
2024-05-02 13:00:48,228   INFO  pretrained_model .//checkpoints/best_checkpoint.pth
2024-05-02 13:00:48,228   INFO  amp              False
2024-05-02 13:00:48,228   INFO  ckp_save_interval 1
2024-05-02 13:00:48,228   INFO  max_ckp_save_num 30
2024-05-02 13:00:48,228   INFO  merge_all_iters_to_one_epoch False
2024-05-02 13:00:48,228   INFO  eval             True
2024-05-02 13:00:48,228   INFO  train_hd         False
2024-05-02 13:00:48,228   INFO  eval_interval    50
2024-05-02 13:00:48,228   INFO  workers          1
2024-05-02 13:00:48,228   INFO  local_rank       0
2024-05-02 13:00:48,228   INFO  launcher         pytorch
2024-05-02 13:00:48,228   INFO  tcp_port         18888
2024-05-02 13:00:48,229   INFO  cfg.ROOT_DIR: /home/EPCL/outdoor_segmentation
2024-05-02 13:00:48,229   INFO  cfg.LOCAL_RANK: 0
2024-05-02 13:00:48,229   INFO  cfg.MODALITY: voxel
2024-05-02 13:00:48,229   INFO  
cfg.DATA = edict()
2024-05-02 13:00:48,229   INFO  cfg.DATA.DATASET: semantickitti
2024-05-02 13:00:48,229   INFO  cfg.DATA.PETRELOSS_CONFIG: None
2024-05-02 13:00:48,229   INFO  cfg.DATA.DATA_PATH: ../../../../root/dataset-kitti/dataset/sequences/
2024-05-02 13:00:48,229   INFO  cfg.DATA.VOXEL_SIZE: 0.05
2024-05-02 13:00:48,229   INFO  cfg.DATA.AUGMENT: GlobalAugment_LP
2024-05-02 13:00:48,229   INFO  cfg.DATA.NUM_POINTS: 1000000
2024-05-02 13:00:48,229   INFO  cfg.DATA.TRAINVAL: False
2024-05-02 13:00:48,229   INFO  cfg.DATA.TTA: False
2024-05-02 13:00:48,229   INFO  cfg.DATA.SAMPLES_PER_EPOCH: 1913
2024-05-02 13:00:48,229   INFO  
cfg.MODEL = edict()
2024-05-02 13:00:48,229   INFO  cfg.MODEL.NAME: EPCLOutdoorSegHD
2024-05-02 13:00:48,230   INFO  cfg.MODEL.IGNORE_LABEL: 0
2024-05-02 13:00:48,230   INFO  cfg.MODEL.IN_FEATURE_DIM: 4
2024-05-02 13:00:48,230   INFO  cfg.MODEL.BLOCK: ResBlock
2024-05-02 13:00:48,230   INFO  cfg.MODEL.NUM_LAYER: [2, 3, 4, 6, 2, 2, 2, 2]
2024-05-02 13:00:48,230   INFO  cfg.MODEL.PLANES: [32, 32, 64, 128, 256, 256, 128, 96, 96]
2024-05-02 13:00:48,230   INFO  cfg.MODEL.cr: 1.6
2024-05-02 13:00:48,230   INFO  cfg.MODEL.DROPOUT_P: 0.0
2024-05-02 13:00:48,230   INFO  cfg.MODEL.LABEL_SMOOTHING: 0.0
2024-05-02 13:00:48,230   INFO  cfg.MODEL.IF_DIST: False
2024-05-02 13:00:48,230   INFO  
cfg.MODEL.EPCL = edict()
2024-05-02 13:00:48,230   INFO  cfg.MODEL.EPCL.ENC_DIM: 768
2024-05-02 13:00:48,230   INFO  cfg.MODEL.EPCL.TOKENIZER_DIM: 409
2024-05-02 13:00:48,230   INFO  cfg.MODEL.EPCL.NUM_GROUP: 512
2024-05-02 13:00:48,230   INFO  cfg.MODEL.EPCL.GROUP_SIZE: 16
2024-05-02 13:00:48,231   INFO  cfg.MODEL.EPCL.VOXEL_SIZE: 0.05
2024-05-02 13:00:48,231   INFO  
cfg.OPTIM = edict()
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.BATCH_SIZE_PER_GPU: 1
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.NUM_EPOCHS: 48
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.OPTIMIZER: sgd
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.LR_PER_SAMPLE: 0.02
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.WEIGHT_DECAY: 0.0001
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.MOMENTUM: 0.9
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.NESTEROV: True
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.GRAD_NORM_CLIP: 10
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.SCHEDULER: linear_warmup_with_cosdecay
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.WARMUP_EPOCH: 1
2024-05-02 13:00:48,231   INFO  cfg.OPTIM.LR: 0.02
2024-05-02 13:00:48,231   INFO  cfg.TAG: EPCL_HD
2024-05-02 13:00:48,232   INFO  cfg.EXP_GROUP_PATH: voxel/semantic_kitti
2024-05-02 13:01:00,039   INFO  ==> Loading parameters from checkpoint .//checkpoints/best_checkpoint.pth to CPU
2024-05-02 13:01:01,901   INFO  ==> Done <All keys matched successfully>
2024-05-02 13:01:01,932   INFO  EPCLOutdoorSegHD(
  (stem): Sequential(
    (0): Conv3d(4, 51, kernel_size=(3, 3, 3), bias=False)
    (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
    (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
  )
  (stage1): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage2): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(51, 102, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage3): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(102, 204, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage4): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(204, 409, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (5): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (6): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (up1): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(613, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(613, 409, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up2): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(306, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(306, 204, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up3): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up4): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(153, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (classifier): Sequential(
    (0): Linear(in_features=766, out_features=20, bias=True)
  )
  (dropout): Dropout(p=0.0, inplace=True)
  (criterion_losses): Losses(
    (ell_loss): ELLLoss()
    (dice_loss_v0): DiceLossV0()
    (dice_loss_v1): DiceLossV1()
    (wce_loss): WeightedCrossEntropyLoss()
    (ce_loss): CrossEntropyLoss()
    (focalloss): FocalLoss()
    (eqlv2): EQLv2()
    (groupsoftmax): GroupSoftmax()
    (groupsoftmax_fgbg): GroupSoftmax_fgbg_2()
  )
  (epcl_encoder): EPCLEncoder(
    (tokenizer): EPCLPreEncoder(
      (group_divider): SparseGroup()
      (encoder): EmbeddingEncoder(
        (first_conv): Sequential(
          (0): Conv1d(409, 128, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (second_conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(512, 768, kernel_size=(1,), stride=(1,))
        )
      )
    )
    (encoder): ClipTransformer(
      (pos_embed): Sequential(
        (0): Linear(in_features=3, out_features=128, bias=True)
        (1): GELU(approximate='none')
        (2): Linear(in_features=128, out_features=768, bias=True)
      )
      (te_encoder): TaskEmbEncoder(
        (embedding): Embedding(20, 768)
        (trans): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): GELU(approximate='none')
          (2): Linear(in_features=768, out_features=768, bias=True)
        )
      )
      (blocks): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (upsamping): PointNetFeaturePropagation(
      (mlp_convs): ModuleList(
        (0): Conv1d(768, 409, kernel_size=(1,), stride=(1,))
      )
      (mlp_bns): ModuleList(
        (0): BatchNorm1d(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
)
2024-05-02 13:01:01,939   INFO  Model parameters: 183.956 M
2024-05-02 13:01:02,254   INFO  *************** TRAINED EPOCH 0 val EVALUATION *****************
2024-05-02 13:17:44,550   INFO  Validation per class iou: 
2024-05-02 13:17:44,561   INFO  +-------------------------+
|      Validation iou     |
+---------------+---------+
| Classes       | IoU     |
+---------------+---------+
| All           | 70.7475 |
| car           | 98.3769 |
| bicycle       | 58.2899 |
| motorcycle    | 77.7367 |
| truck         | 86.0861 |
| other-vehicle | 83.9647 |
| person        | 77.0357 |
| bicyclist     | 84.8151 |
| motorcyclist  | 27.2455 |
| road          | 94.0165 |
| parking       | 58.9189 |
| sidewalk      | 81.6524 |
| other-ground  | 0.2083  |
| building      | 93.5211 |
| fence         | 62.957  |
| vegetation    | 89.3418 |
| trunk         | 72.8406 |
| terrain       | 77.407  |
| pole          | 67.9694 |
| traffic-sign  | 51.8181 |
+---------------+---------+
2024-05-02 13:17:44,570   INFO  +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                    Confusion matrix                                                                                                                    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| Classes       | car     | bicycle | motorcycle | truck   | other-vehicle | person  | bicyclist | motorcyclist | road    | parking | sidewalk | other-ground | building | fence   | vegetation | trunk   | terrain | pole    | traffic-sign | Points    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| car           | 99.2018 | 0.0036  | 0.006      | 0.0279  | 0.1612        | 0.0077  | 0.0042    | 0.0013       | 0.2555  | 0.1924  | 0.1159   | 0.0004       | 0.0043   | 0.0035  | 0.0074     | 0.0002  | 0.0042  | 0.002   | 0.0005       | 30797874  |
| bicycle       | 0.4979  | 86.2881 | 1.8892     | 0.0043  | 0.3008        | 0.0947  | 0.0583    | 0.0          | 0.0004  | 0.0141  | 1.603    | 0.0004       | 1.2837   | 4.1833  | 3.1151     | 0.0219  | 0.6277  | 0.0167  | 0.0004       | 233381    |
| motorcycle    | 0.5539  | 0.123   | 97.9892    | 0.0321  | 0.2968        | 0.1455  | 0.0108    | 0.0117       | 0.0833  | 0.0143  | 0.0584   | 0.0          | 0.0044   | 0.0824  | 0.5185     | 0.0149  | 0.0587  | 0.002   | 0.0          | 342303    |
| truck         | 0.0544  | 0.0006  | 0.0166     | 99.2582 | 0.2295        | 0.2461  | 0.0032    | 0.0028       | 0.0528  | 0.0014  | 0.0631   | 0.0045       | 0.0008   | 0.0002  | 0.0117     | 0.0     | 0.0004  | 0.0008  | 0.0532       | 505942    |
| other-vehicle | 2.0941  | 0.3204  | 0.8807     | 1.9639  | 93.0764       | 0.1409  | 0.0286    | 0.0004       | 0.0901  | 0.0684  | 0.2665   | 0.0006       | 0.3708   | 0.2634  | 0.3726     | 0.002   | 0.052   | 0.0052  | 0.0029       | 2179105   |
| person        | 0.0869  | 0.0389  | 0.0581     | 0.0183  | 0.0114        | 95.823  | 0.5175    | 0.2273       | 0.0933  | 0.003   | 0.4353   | 0.0041       | 1.4517   | 0.0983  | 0.9917     | 0.0338  | 0.0731  | 0.032   | 0.0024       | 464972    |
| bicyclist     | 0.0346  | 0.047   | 0.0248     | 0.0042  | 0.0039        | 1.2734  | 97.6869   | 0.3234       | 0.5221  | 0.0     | 0.0372   | 0.0          | 0.0      | 0.0003  | 0.0284     | 0.0     | 0.0026  | 0.0111  | 0.0          | 306431    |
| motorcyclist  | 0.0499  | 0.8567  | 11.4183    | 0.0045  | 0.0           | 19.5277 | 13.8026   | 50.3513      | 0.0     | 0.0     | 2.1622   | 0.0          | 0.0      | 0.1043  | 1.7134     | 0.0     | 0.0091  | 0.0     | 0.0          | 22061     |
| road          | 0.1565  | 0.0004  | 0.007      | 0.0027  | 0.0102        | 0.0064  | 0.0203    | 0.0002       | 95.6605 | 0.1243  | 3.6593   | 0.0196       | 0.0      | 0.0017  | 0.008      | 0.0014  | 0.3215  | 0.0     | 0.0          | 87918013  |
| parking       | 0.2911  | 0.0003  | 0.209      | 0.0008  | 0.1602        | 0.003   | 0.0001    | 0.0001       | 5.8521  | 64.3243 | 23.351   | 0.0401       | 0.0105   | 0.0165  | 0.2465     | 0.0276  | 5.4656  | 0.0011  | 0.0          | 5936631   |
| sidewalk      | 0.0365  | 0.0452  | 0.0105     | 0.0012  | 0.0108        | 0.0243  | 0.0014    | 0.0012       | 1.3652  | 0.4325  | 92.9775  | 0.4275       | 0.147    | 0.8841  | 0.394      | 0.0023  | 3.2063  | 0.0323  | 0.0          | 60065386  |
| other-ground  | 0.0089  | 0.0061  | 0.0054     | 0.0     | 0.1916        | 0.0009  | 0.0002    | 0.0          | 19.0148 | 0.1706  | 34.3454  | 0.3554       | 0.6034   | 0.4747  | 17.5401    | 0.0     | 27.2817 | 0.0002  | 0.0007       | 429097    |
| building      | 0.012   | 0.0216  | 0.0033     | 0.033   | 0.1738        | 0.0415  | 0.0028    | 0.0004       | 0.0081  | 0.0006  | 0.2352   | 0.0049       | 96.986   | 1.0985  | 1.2055     | 0.0171  | 0.1223  | 0.0141  | 0.0193       | 55003986  |
| fence         | 0.0221  | 0.0317  | 0.0042     | 0.0047  | 0.1246        | 0.0091  | 0.0003    | 0.0002       | 0.0038  | 0.0011  | 0.5386   | 0.0032       | 9.6883   | 85.6769 | 3.4151     | 0.0294  | 0.3301  | 0.112   | 0.0046       | 12332443  |
| vegetation    | 0.0127  | 0.0328  | 0.0158     | 0.0023  | 0.0246        | 0.0237  | 0.0116    | 0.0096       | 0.0113  | 0.0029  | 0.4897   | 0.0027       | 0.4013   | 1.7922  | 94.115     | 0.5037  | 2.4589  | 0.0788  | 0.0102       | 141846164 |
| trunk         | 0.0021  | 0.0022  | 0.0436     | 0.0042  | 0.0533        | 0.1651  | 0.0272    | 0.0015       | 0.0004  | 0.0002  | 0.0115   | 0.002        | 0.1077   | 0.3459  | 11.7443    | 86.2058 | 0.9396  | 0.3312  | 0.0123       | 5350585   |
| terrain       | 0.0062  | 0.0176  | 0.0133     | 0.0003  | 0.008         | 0.0033  | 0.0005    | 0.0003       | 0.2916  | 0.1731  | 4.1665   | 0.0306       | 0.1844   | 1.11    | 8.5591     | 0.2526  | 85.1509 | 0.0315  | 0.0002       | 63136478  |
| pole          | 0.0239  | 0.1035  | 0.0169     | 0.005   | 0.0471        | 0.2497  | 0.0004    | 0.0047       | 0.0029  | 0.0015  | 0.6278   | 0.0046       | 2.0867   | 1.8165  | 6.0341     | 5.3725  | 0.9603  | 80.7341 | 1.9076       | 1615676   |
| traffic-sign  | 0.0429  | 0.0944  | 0.0118     | 0.0479  | 0.9777        | 1.3627  | 0.1152    | 0.2805       | 0.0157  | 0.0     | 0.009    | 0.0028       | 2.0325   | 0.7098  | 1.7352     | 0.9458  | 0.0092  | 31.3935 | 60.2134      | 356854    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
