2024-05-02 22:51:39,578   INFO  **********************Start logging**********************
2024-05-02 22:51:39,578   INFO  CUDA_VISIBLE_DEVICES=ALL
2024-05-02 22:51:39,578   INFO  total_batch_size: 1
2024-05-02 22:51:39,578   INFO  total_lr: 0.020000
2024-05-02 22:51:39,578   INFO  cfg_file         tools/cfgs/voxel/semantic_kitti/EPCL_HD.yaml
2024-05-02 22:51:39,578   INFO  extra_tag        val_EPCL_HD_x5
2024-05-02 22:51:39,578   INFO  set_cfgs         None
2024-05-02 22:51:39,578   INFO  fix_random_seed  True
2024-05-02 22:51:39,578   INFO  exp              5
2024-05-02 22:51:39,578   INFO  batch_size       1
2024-05-02 22:51:39,578   INFO  epochs           48
2024-05-02 22:51:39,579   INFO  sync_bn          False
2024-05-02 22:51:39,579   INFO  ckp              None
2024-05-02 22:51:39,579   INFO  pretrained_model .//checkpoints/best_checkpoint.pth
2024-05-02 22:51:39,579   INFO  amp              False
2024-05-02 22:51:39,579   INFO  ckp_save_interval 1
2024-05-02 22:51:39,579   INFO  max_ckp_save_num 30
2024-05-02 22:51:39,579   INFO  merge_all_iters_to_one_epoch False
2024-05-02 22:51:39,579   INFO  eval             True
2024-05-02 22:51:39,579   INFO  train_hd         False
2024-05-02 22:51:39,579   INFO  eval_interval    50
2024-05-02 22:51:39,579   INFO  workers          1
2024-05-02 22:51:39,579   INFO  local_rank       0
2024-05-02 22:51:39,579   INFO  launcher         pytorch
2024-05-02 22:51:39,579   INFO  tcp_port         18888
2024-05-02 22:51:39,579   INFO  cfg.ROOT_DIR: /home/EPCL/outdoor_segmentation
2024-05-02 22:51:39,579   INFO  cfg.LOCAL_RANK: 0
2024-05-02 22:51:39,579   INFO  cfg.MODALITY: voxel
2024-05-02 22:51:39,579   INFO  
cfg.DATA = edict()
2024-05-02 22:51:39,579   INFO  cfg.DATA.DATASET: semantickitti
2024-05-02 22:51:39,579   INFO  cfg.DATA.PETRELOSS_CONFIG: None
2024-05-02 22:51:39,579   INFO  cfg.DATA.DATA_PATH: ../../../../root/dataset-kitti/dataset/sequences/
2024-05-02 22:51:39,579   INFO  cfg.DATA.VOXEL_SIZE: 0.05
2024-05-02 22:51:39,580   INFO  cfg.DATA.AUGMENT: GlobalAugment_LP
2024-05-02 22:51:39,580   INFO  cfg.DATA.NUM_POINTS: 1000000
2024-05-02 22:51:39,580   INFO  cfg.DATA.TRAINVAL: False
2024-05-02 22:51:39,580   INFO  cfg.DATA.TTA: False
2024-05-02 22:51:39,580   INFO  cfg.DATA.SAMPLES_PER_EPOCH: 19130
2024-05-02 22:51:39,580   INFO  
cfg.MODEL = edict()
2024-05-02 22:51:39,580   INFO  cfg.MODEL.NAME: EPCLOutdoorSegHD
2024-05-02 22:51:39,580   INFO  cfg.MODEL.IGNORE_LABEL: 0
2024-05-02 22:51:39,580   INFO  cfg.MODEL.IN_FEATURE_DIM: 4
2024-05-02 22:51:39,580   INFO  cfg.MODEL.BLOCK: ResBlock
2024-05-02 22:51:39,580   INFO  cfg.MODEL.NUM_LAYER: [2, 3, 4, 6, 2, 2, 2, 2]
2024-05-02 22:51:39,580   INFO  cfg.MODEL.PLANES: [32, 32, 64, 128, 256, 256, 128, 96, 96]
2024-05-02 22:51:39,580   INFO  cfg.MODEL.cr: 1.6
2024-05-02 22:51:39,580   INFO  cfg.MODEL.DROPOUT_P: 0.0
2024-05-02 22:51:39,580   INFO  cfg.MODEL.LABEL_SMOOTHING: 0.0
2024-05-02 22:51:39,580   INFO  cfg.MODEL.IF_DIST: False
2024-05-02 22:51:39,580   INFO  
cfg.MODEL.EPCL = edict()
2024-05-02 22:51:39,580   INFO  cfg.MODEL.EPCL.ENC_DIM: 768
2024-05-02 22:51:39,580   INFO  cfg.MODEL.EPCL.TOKENIZER_DIM: 409
2024-05-02 22:51:39,580   INFO  cfg.MODEL.EPCL.NUM_GROUP: 512
2024-05-02 22:51:39,580   INFO  cfg.MODEL.EPCL.GROUP_SIZE: 16
2024-05-02 22:51:39,580   INFO  cfg.MODEL.EPCL.VOXEL_SIZE: 0.05
2024-05-02 22:51:39,581   INFO  
cfg.OPTIM = edict()
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.BATCH_SIZE_PER_GPU: 1
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.NUM_EPOCHS: 48
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.OPTIMIZER: sgd
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.LR_PER_SAMPLE: 0.02
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.WEIGHT_DECAY: 0.0001
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.MOMENTUM: 0.9
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.NESTEROV: True
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.GRAD_NORM_CLIP: 10
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.SCHEDULER: linear_warmup_with_cosdecay
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.WARMUP_EPOCH: 1
2024-05-02 22:51:39,581   INFO  cfg.OPTIM.LR: 0.02
2024-05-02 22:51:39,581   INFO  cfg.TAG: EPCL_HD
2024-05-02 22:51:39,581   INFO  cfg.EXP_GROUP_PATH: voxel/semantic_kitti
2024-05-02 22:53:28,845   INFO  ==> Loading parameters from checkpoint .//checkpoints/best_checkpoint.pth to CPU
2024-05-02 22:53:31,251   INFO  ==> Done <All keys matched successfully>
2024-05-02 22:53:31,300   INFO  EPCLOutdoorSegHD(
  (stem): Sequential(
    (0): Conv3d(4, 51, kernel_size=(3, 3, 3), bias=False)
    (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
    (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
  )
  (stage1): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage2): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(51, 102, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage3): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(102, 204, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage4): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(204, 409, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (5): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (6): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (up1): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(613, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(613, 409, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up2): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(306, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(306, 204, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up3): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up4): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(153, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (classifier): Sequential(
    (0): Linear(in_features=766, out_features=20, bias=True)
  )
  (dropout): Dropout(p=0.0, inplace=True)
  (criterion_losses): Losses(
    (ell_loss): ELLLoss()
    (dice_loss_v0): DiceLossV0()
    (dice_loss_v1): DiceLossV1()
    (wce_loss): WeightedCrossEntropyLoss()
    (ce_loss): CrossEntropyLoss()
    (focalloss): FocalLoss()
    (eqlv2): EQLv2()
    (groupsoftmax): GroupSoftmax()
    (groupsoftmax_fgbg): GroupSoftmax_fgbg_2()
  )
  (epcl_encoder): EPCLEncoder(
    (tokenizer): EPCLPreEncoder(
      (group_divider): SparseGroup()
      (encoder): EmbeddingEncoder(
        (first_conv): Sequential(
          (0): Conv1d(409, 128, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (second_conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(512, 768, kernel_size=(1,), stride=(1,))
        )
      )
    )
    (encoder): ClipTransformer(
      (pos_embed): Sequential(
        (0): Linear(in_features=3, out_features=128, bias=True)
        (1): GELU(approximate='none')
        (2): Linear(in_features=128, out_features=768, bias=True)
      )
      (te_encoder): TaskEmbEncoder(
        (embedding): Embedding(20, 768)
        (trans): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): GELU(approximate='none')
          (2): Linear(in_features=768, out_features=768, bias=True)
        )
      )
      (blocks): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (upsamping): PointNetFeaturePropagation(
      (mlp_convs): ModuleList(
        (0): Conv1d(768, 409, kernel_size=(1,), stride=(1,))
      )
      (mlp_bns): ModuleList(
        (0): BatchNorm1d(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
)
2024-05-02 22:53:31,305   INFO  Model parameters: 183.956 M
2024-05-02 22:53:31,645   INFO  *************** TRAINED EPOCH 0 val EVALUATION *****************
2024-05-02 23:09:50,761   INFO  Validation per class iou: 
2024-05-02 23:09:50,765   INFO  +-------------------------+
|      Validation iou     |
+---------------+---------+
| Classes       | IoU     |
+---------------+---------+
| All           | 70.3551 |
| car           | 98.298  |
| bicycle       | 54.423  |
| motorcycle    | 77.1808 |
| truck         | 83.9093 |
| other-vehicle | 83.0251 |
| person        | 74.8532 |
| bicyclist     | 84.9455 |
| motorcyclist  | 30.3528 |
| road          | 94.0799 |
| parking       | 59.0265 |
| sidewalk      | 81.7179 |
| other-ground  | 0.4699  |
| building      | 92.8476 |
| fence         | 64.4769 |
| vegetation    | 88.9148 |
| trunk         | 73.3335 |
| terrain       | 77.5834 |
| pole          | 67.1599 |
| traffic-sign  | 50.1485 |
+---------------+---------+
2024-05-02 23:09:50,777   INFO  +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                    Confusion matrix                                                                                                                    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| Classes       | car     | bicycle | motorcycle | truck   | other-vehicle | person  | bicyclist | motorcyclist | road    | parking | sidewalk | other-ground | building | fence   | vegetation | trunk   | terrain | pole    | traffic-sign | Points    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| car           | 99.1808 | 0.0059  | 0.0084     | 0.0316  | 0.1702        | 0.009   | 0.005     | 0.0018       | 0.2126  | 0.2172  | 0.1147   | 0.0018       | 0.0106   | 0.0067  | 0.0083     | 0.0003  | 0.0104  | 0.0034  | 0.0015       | 30794521  |
| bicycle       | 0.5289  | 87.2205 | 1.8758     | 0.0111  | 0.3036        | 0.1258  | 0.0633    | 0.0004       | 0.0034  | 0.0149  | 1.0463   | 0.0217       | 1.1029   | 3.8009  | 1.9307     | 0.0438  | 1.8762  | 0.0285  | 0.0013       | 235205    |
| motorcycle    | 0.5001  | 0.138   | 97.8405    | 0.0353  | 0.3358        | 0.1596  | 0.0108    | 0.0114       | 0.1418  | 0.0187  | 0.0549   | 0.0058       | 0.0216   | 0.1012  | 0.3393     | 0.0184  | 0.262   | 0.0047  | 0.0          | 342723    |
| truck         | 0.0623  | 0.0002  | 0.1145     | 98.8988 | 0.205         | 0.3422  | 0.0028    | 0.003        | 0.0613  | 0.0047  | 0.0587   | 0.0077       | 0.0125   | 0.0006  | 0.0075     | 0.0002  | 0.0008  | 0.001   | 0.2163       | 505833    |
| other-vehicle | 1.7469  | 0.3914  | 0.9648     | 2.0452  | 92.7074       | 0.1818  | 0.0301    | 0.0007       | 0.064   | 0.1001  | 0.2315   | 0.0116       | 0.7558   | 0.3331  | 0.3013     | 0.0048  | 0.1171  | 0.0077  | 0.0047       | 2182435   |
| person        | 0.0844  | 0.0491  | 0.0967     | 0.0239  | 0.0299        | 96.1041 | 0.4821    | 0.2753       | 0.1066  | 0.0084  | 0.4373   | 0.0381       | 1.2137   | 0.0692  | 0.7734     | 0.0364  | 0.1299  | 0.0381  | 0.003        | 464185    |
| bicyclist     | 0.0271  | 0.0353  | 0.0287     | 0.0023  | 0.0078        | 1.2603  | 97.6383   | 0.3316       | 0.5859  | 0.0016  | 0.0323   | 0.0049       | 0.0      | 0.0     | 0.0258     | 0.0003  | 0.0062  | 0.0114  | 0.0          | 306351    |
| motorcyclist  | 0.0092  | 0.1649  | 10.2794    | 0.0     | 0.0092        | 17.3706 | 16.262    | 52.5744      | 0.0     | 0.0     | 2.098    | 0.0          | 0.0046   | 0.0137  | 1.1819     | 0.0     | 0.0321  | 0.0     | 0.0          | 21830     |
| road          | 0.1737  | 0.0004  | 0.0035     | 0.002   | 0.0105        | 0.0056  | 0.015     | 0.0002       | 95.603  | 0.1786  | 3.5483   | 0.0372       | 0.0      | 0.0011  | 0.0037     | 0.0019  | 0.4152  | 0.0001  | 0.0          | 87844262  |
| parking       | 0.248   | 0.0004  | 0.1022     | 0.0008  | 0.0663        | 0.0028  | 0.0001    | 0.0001       | 5.1469  | 66.676  | 22.0141  | 0.1435       | 0.015    | 0.0152  | 0.1321     | 0.0212  | 5.409   | 0.0062  | 0.0          | 5927020   |
| sidewalk      | 0.0324  | 0.0557  | 0.009      | 0.0014  | 0.0069        | 0.0235  | 0.0013    | 0.0013       | 1.3562  | 0.6521  | 92.6507  | 0.5765       | 0.1451   | 0.7519  | 0.2068     | 0.0021  | 3.4803  | 0.0466  | 0.0001       | 60026697  |
| other-ground  | 0.0075  | 0.0059  | 0.0073     | 0.0007  | 0.1314        | 0.0041  | 0.0       | 0.0          | 18.1905 | 0.2697  | 32.0969  | 1.0832       | 0.7831   | 0.7236  | 12.382     | 0.0     | 34.3125 | 0.0011  | 0.0007       | 440566    |
| building      | 0.0261  | 0.0264  | 0.0055     | 0.0384  | 0.1996        | 0.0455  | 0.004     | 0.0007       | 0.0071  | 0.001   | 0.2003   | 0.0277       | 96.7447  | 1.276   | 1.0367     | 0.0405  | 0.271   | 0.0203  | 0.0286       | 55317348  |
| fence         | 0.0296  | 0.033   | 0.004      | 0.0096  | 0.108         | 0.0106  | 0.0005    | 0.0003       | 0.0041  | 0.0014  | 0.5591   | 0.0215       | 10.0646  | 85.3945 | 2.9759     | 0.0326  | 0.6114  | 0.1342  | 0.0052       | 12371857  |
| vegetation    | 0.0176  | 0.0449  | 0.0235     | 0.0064  | 0.0316        | 0.0334  | 0.0132    | 0.0074       | 0.0075  | 0.0046  | 0.5704   | 0.026        | 0.5649   | 1.6862  | 92.54      | 0.4554  | 3.862   | 0.0938  | 0.0112       | 141051607 |
| trunk         | 0.0039  | 0.004   | 0.0587     | 0.0109  | 0.1041        | 0.199   | 0.0394    | 0.0014       | 0.0004  | 0.0003  | 0.0104   | 0.0618       | 0.1869   | 0.3599  | 11.56      | 86.0026 | 0.9855  | 0.3986  | 0.012        | 5316218   |
| terrain       | 0.0069  | 0.0202  | 0.0088     | 0.0004  | 0.0047        | 0.0039  | 0.0007    | 0.0004       | 0.2176  | 0.2246  | 3.8355   | 0.2026       | 0.1707   | 0.648   | 6.1501     | 0.244   | 88.224  | 0.0366  | 0.0002       | 63291930  |
| pole          | 0.0218  | 0.0911  | 0.0204     | 0.022   | 0.0487        | 0.2434  | 0.0005    | 0.0033       | 0.0045  | 0.0033  | 0.5647   | 0.0275       | 2.0076   | 1.3756  | 5.4462     | 5.4229  | 1.1094  | 81.7886 | 1.7984       | 1616525   |
| traffic-sign  | 0.0146  | 0.0689  | 0.0229     | 0.1204  | 0.9835        | 1.3794  | 0.0548    | 0.224        | 0.0146  | 0.0003  | 0.0085   | 0.0039       | 2.7024   | 0.7047  | 1.5233     | 0.7742  | 0.0116  | 32.4121 | 58.9759      | 362972    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
