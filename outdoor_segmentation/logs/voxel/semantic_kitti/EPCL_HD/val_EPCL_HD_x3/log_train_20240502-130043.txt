2024-05-02 13:00:43,931   INFO  **********************Start logging**********************
2024-05-02 13:00:43,931   INFO  CUDA_VISIBLE_DEVICES=ALL
2024-05-02 13:00:43,931   INFO  total_batch_size: 1
2024-05-02 13:00:43,931   INFO  total_lr: 0.020000
2024-05-02 13:00:43,931   INFO  cfg_file         tools/cfgs/voxel/semantic_kitti/EPCL_HD.yaml
2024-05-02 13:00:43,931   INFO  extra_tag        val_EPCL_HD_x3
2024-05-02 13:00:43,931   INFO  set_cfgs         None
2024-05-02 13:00:43,931   INFO  fix_random_seed  True
2024-05-02 13:00:43,931   INFO  exp              3
2024-05-02 13:00:43,931   INFO  batch_size       1
2024-05-02 13:00:43,931   INFO  epochs           48
2024-05-02 13:00:43,931   INFO  sync_bn          False
2024-05-02 13:00:43,931   INFO  ckp              None
2024-05-02 13:00:43,931   INFO  pretrained_model .//checkpoints/best_checkpoint.pth
2024-05-02 13:00:43,931   INFO  amp              False
2024-05-02 13:00:43,931   INFO  ckp_save_interval 1
2024-05-02 13:00:43,931   INFO  max_ckp_save_num 30
2024-05-02 13:00:43,931   INFO  merge_all_iters_to_one_epoch False
2024-05-02 13:00:43,931   INFO  eval             True
2024-05-02 13:00:43,931   INFO  train_hd         False
2024-05-02 13:00:43,931   INFO  eval_interval    50
2024-05-02 13:00:43,931   INFO  workers          1
2024-05-02 13:00:43,931   INFO  local_rank       0
2024-05-02 13:00:43,931   INFO  launcher         pytorch
2024-05-02 13:00:43,931   INFO  tcp_port         18888
2024-05-02 13:00:43,931   INFO  cfg.ROOT_DIR: /home/EPCL/outdoor_segmentation
2024-05-02 13:00:43,931   INFO  cfg.LOCAL_RANK: 0
2024-05-02 13:00:43,931   INFO  cfg.MODALITY: voxel
2024-05-02 13:00:43,931   INFO  
cfg.DATA = edict()
2024-05-02 13:00:43,931   INFO  cfg.DATA.DATASET: semantickitti
2024-05-02 13:00:43,932   INFO  cfg.DATA.PETRELOSS_CONFIG: None
2024-05-02 13:00:43,932   INFO  cfg.DATA.DATA_PATH: ../../../../root/dataset-kitti/dataset/sequences/
2024-05-02 13:00:43,932   INFO  cfg.DATA.VOXEL_SIZE: 0.05
2024-05-02 13:00:43,932   INFO  cfg.DATA.AUGMENT: GlobalAugment_LP
2024-05-02 13:00:43,932   INFO  cfg.DATA.NUM_POINTS: 1000000
2024-05-02 13:00:43,932   INFO  cfg.DATA.TRAINVAL: False
2024-05-02 13:00:43,932   INFO  cfg.DATA.TTA: False
2024-05-02 13:00:43,932   INFO  cfg.DATA.SAMPLES_PER_EPOCH: 1913
2024-05-02 13:00:43,932   INFO  
cfg.MODEL = edict()
2024-05-02 13:00:43,932   INFO  cfg.MODEL.NAME: EPCLOutdoorSegHD
2024-05-02 13:00:43,932   INFO  cfg.MODEL.IGNORE_LABEL: 0
2024-05-02 13:00:43,932   INFO  cfg.MODEL.IN_FEATURE_DIM: 4
2024-05-02 13:00:43,932   INFO  cfg.MODEL.BLOCK: ResBlock
2024-05-02 13:00:43,932   INFO  cfg.MODEL.NUM_LAYER: [2, 3, 4, 6, 2, 2, 2, 2]
2024-05-02 13:00:43,932   INFO  cfg.MODEL.PLANES: [32, 32, 64, 128, 256, 256, 128, 96, 96]
2024-05-02 13:00:43,932   INFO  cfg.MODEL.cr: 1.6
2024-05-02 13:00:43,932   INFO  cfg.MODEL.DROPOUT_P: 0.0
2024-05-02 13:00:43,932   INFO  cfg.MODEL.LABEL_SMOOTHING: 0.0
2024-05-02 13:00:43,932   INFO  cfg.MODEL.IF_DIST: False
2024-05-02 13:00:43,932   INFO  
cfg.MODEL.EPCL = edict()
2024-05-02 13:00:43,932   INFO  cfg.MODEL.EPCL.ENC_DIM: 768
2024-05-02 13:00:43,932   INFO  cfg.MODEL.EPCL.TOKENIZER_DIM: 409
2024-05-02 13:00:43,932   INFO  cfg.MODEL.EPCL.NUM_GROUP: 512
2024-05-02 13:00:43,932   INFO  cfg.MODEL.EPCL.GROUP_SIZE: 16
2024-05-02 13:00:43,932   INFO  cfg.MODEL.EPCL.VOXEL_SIZE: 0.05
2024-05-02 13:00:43,932   INFO  
cfg.OPTIM = edict()
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.BATCH_SIZE_PER_GPU: 1
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.NUM_EPOCHS: 48
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.OPTIMIZER: sgd
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.LR_PER_SAMPLE: 0.02
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.WEIGHT_DECAY: 0.0001
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.MOMENTUM: 0.9
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.NESTEROV: True
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.GRAD_NORM_CLIP: 10
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.SCHEDULER: linear_warmup_with_cosdecay
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.WARMUP_EPOCH: 1
2024-05-02 13:00:43,932   INFO  cfg.OPTIM.LR: 0.02
2024-05-02 13:00:43,932   INFO  cfg.TAG: EPCL_HD
2024-05-02 13:00:43,932   INFO  cfg.EXP_GROUP_PATH: voxel/semantic_kitti
2024-05-02 13:01:41,736   INFO  ==> Loading parameters from checkpoint .//checkpoints/best_checkpoint.pth to CPU
2024-05-02 13:01:43,828   INFO  ==> Done <All keys matched successfully>
2024-05-02 13:01:43,848   INFO  EPCLOutdoorSegHD(
  (stem): Sequential(
    (0): Conv3d(4, 51, kernel_size=(3, 3, 3), bias=False)
    (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (2): ReLU(inplace=True)
    (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
    (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (5): ReLU(inplace=True)
  )
  (stage1): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(51, 51, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage2): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(51, 51, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(51, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(51, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(51, 102, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(102, 102, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage3): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(102, 102, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(102, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(102, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(102, 204, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (stage4): Sequential(
    (0): BasicConvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(204, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Sequential(
        (0): Conv3d(204, 409, kernel_size=(1, 1, 1), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (relu): ReLU(inplace=True)
    )
    (2): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (3): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (4): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (5): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
    (6): ResidualBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
        (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
        (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
      (downsample): Identity()
      (relu): ReLU(inplace=True)
    )
  )
  (up1): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 409, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(613, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(613, 409, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(409, 409, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up2): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(409, 204, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(306, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(306, 204, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(204, 204, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(204, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up3): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(204, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (up4): ModuleList(
    (0): BasicDeconvolutionBlock(
      (net): Sequential(
        (0): Conv3d(153, 153, kernel_size=(2, 2, 2), stride=(2, 2, 2), bias=False, transposed=True)
        (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (2): ReLU(inplace=True)
      )
    )
    (1): Sequential(
      (0): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(204, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Sequential(
          (0): Conv3d(204, 153, kernel_size=(1, 1, 1), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (relu): ReLU(inplace=True)
      )
      (1): ResidualBlock(
        (net): Sequential(
          (0): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (1): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv3d(153, 153, kernel_size=(3, 3, 3), bias=False)
          (4): BatchNorm(153, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
        (downsample): Identity()
        (relu): ReLU(inplace=True)
      )
    )
  )
  (classifier): Sequential(
    (0): Linear(in_features=766, out_features=20, bias=True)
  )
  (dropout): Dropout(p=0.0, inplace=True)
  (criterion_losses): Losses(
    (ell_loss): ELLLoss()
    (dice_loss_v0): DiceLossV0()
    (dice_loss_v1): DiceLossV1()
    (wce_loss): WeightedCrossEntropyLoss()
    (ce_loss): CrossEntropyLoss()
    (focalloss): FocalLoss()
    (eqlv2): EQLv2()
    (groupsoftmax): GroupSoftmax()
    (groupsoftmax_fgbg): GroupSoftmax_fgbg_2()
  )
  (epcl_encoder): EPCLEncoder(
    (tokenizer): EPCLPreEncoder(
      (group_divider): SparseGroup()
      (encoder): EmbeddingEncoder(
        (first_conv): Sequential(
          (0): Conv1d(409, 128, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(128, 256, kernel_size=(1,), stride=(1,))
        )
        (second_conv): Sequential(
          (0): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
          (1): BatchNorm1d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv1d(512, 768, kernel_size=(1,), stride=(1,))
        )
      )
    )
    (encoder): ClipTransformer(
      (pos_embed): Sequential(
        (0): Linear(in_features=3, out_features=128, bias=True)
        (1): GELU(approximate='none')
        (2): Linear(in_features=128, out_features=768, bias=True)
      )
      (te_encoder): TaskEmbEncoder(
        (embedding): Embedding(20, 768)
        (trans): Sequential(
          (0): Linear(in_features=768, out_features=768, bias=True)
          (1): GELU(approximate='none')
          (2): Linear(in_features=768, out_features=768, bias=True)
        )
      )
      (blocks): Transformer(
        (resblocks): Sequential(
          (0): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (1): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (2): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (3): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (4): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (5): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (6): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (7): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (8): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (9): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (10): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
          (11): ResidualAttentionBlock(
            (attn): MultiheadAttention(
              (out_proj): NonDynamicallyQuantizableLinear(in_features=768, out_features=768, bias=True)
            )
            (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
            (mlp): Sequential(
              (c_fc): Linear(in_features=768, out_features=3072, bias=True)
              (gelu): QuickGELU()
              (c_proj): Linear(in_features=3072, out_features=768, bias=True)
            )
            (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)
          )
        )
      )
    )
    (upsamping): PointNetFeaturePropagation(
      (mlp_convs): ModuleList(
        (0): Conv1d(768, 409, kernel_size=(1,), stride=(1,))
      )
      (mlp_bns): ModuleList(
        (0): BatchNorm1d(409, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      )
    )
  )
)
2024-05-02 13:01:43,856   INFO  Model parameters: 183.956 M
2024-05-02 13:01:43,989   INFO  *************** TRAINED EPOCH 0 val EVALUATION *****************
2024-05-02 13:15:04,678   INFO  Validation per class iou: 
2024-05-02 13:15:04,679   INFO  +-------------------------+
|      Validation iou     |
+---------------+---------+
| Classes       | IoU     |
+---------------+---------+
| All           | 45.9734 |
| car           | 88.7693 |
| bicycle       | 25.4148 |
| motorcycle    | 28.8941 |
| truck         | 7.1047  |
| other-vehicle | 32.5681 |
| person        | 37.7056 |
| bicyclist     | 33.6161 |
| motorcyclist  | 1.006   |
| road          | 91.8746 |
| parking       | 27.2285 |
| sidewalk      | 73.5591 |
| other-ground  | 0.0129  |
| building      | 72.9366 |
| fence         | 50.2954 |
| vegetation    | 80.1187 |
| trunk         | 61.092  |
| terrain       | 66.7208 |
| pole          | 62.6373 |
| traffic-sign  | 31.9396 |
+---------------+---------+
2024-05-02 13:15:04,685   INFO  +--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
|                                                                                                                    Confusion matrix                                                                                                                    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| Classes       | car     | bicycle | motorcycle | truck   | other-vehicle | person  | bicyclist | motorcyclist | road    | parking | sidewalk | other-ground | building | fence   | vegetation | trunk   | terrain | pole    | traffic-sign | Points    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
| car           | 96.3891 | 0.0291  | 0.1572     | 0.1503  | 0.4541        | 0.0133  | 0.0125    | 0.0005       | 2.1589  | 0.0845  | 0.1335   | 0.0002       | 0.2212   | 0.0087  | 0.0897     | 0.0061  | 0.0317  | 0.0079  | 0.0515       | 30756329  |
| bicycle       | 3.6723  | 41.9945 | 13.9512    | 0.4948  | 0.9642        | 7.1384  | 15.0984   | 0.5713       | 0.1472  | 0.1397  | 1.6204   | 0.0037       | 0.6233   | 2.4066  | 7.4232     | 0.0649  | 3.6436  | 0.0383  | 0.0042       | 240503    |
| motorcycle    | 12.5174 | 2.9524  | 61.4656    | 2.1481  | 15.3911       | 0.3864  | 1.8661    | 0.0196       | 0.4912  | 0.0079  | 0.1515   | 0.0          | 0.1404   | 0.5694  | 0.962      | 0.0108  | 0.6573  | 0.2177  | 0.0452       | 342634    |
| truck         | 10.5825 | 0.5379  | 8.5654     | 11.0089 | 55.2951       | 0.2671  | 0.453     | 0.0255       | 0.7565  | 0.008   | 0.0914   | 0.0004       | 5.5798   | 3.3955  | 1.2897     | 0.1257  | 0.1755  | 0.0221  | 1.82         | 498634    |
| other-vehicle | 15.0799 | 0.4585  | 6.2565     | 5.8681  | 53.043        | 0.2319  | 0.2539    | 0.0073       | 7.4018  | 0.0585  | 0.3211   | 0.0007       | 4.7251   | 3.9403  | 1.0334     | 0.0972  | 0.4946  | 0.0531  | 0.675        | 2174261   |
| person        | 1.4861  | 2.4634  | 1.1358     | 0.1802  | 0.2273        | 61.9635 | 22.3243   | 0.6942       | 0.5195  | 0.0193  | 0.751    | 0.0066       | 0.8733   | 0.1094  | 6.173      | 0.3208  | 0.62    | 0.1266  | 0.0057       | 471634    |
| bicyclist     | 2.8261  | 1.1052  | 1.9732     | 0.0684  | 1.0838        | 24.5379 | 61.841    | 0.4454       | 2.5886  | 0.0033  | 0.0602   | 0.0003       | 0.0204   | 0.0234  | 0.1352     | 0.5273  | 0.2365  | 2.5126  | 0.0115       | 304028    |
| motorcyclist  | 2.0813  | 10.5604 | 19.2074    | 0.6847  | 0.9613        | 23.4107 | 34.0165   | 1.6732       | 0.0408  | 0.0181  | 2.0586   | 0.0          | 0.1542   | 0.127   | 4.5071     | 0.2131  | 0.2811  | 0.0045  | 0.0          | 22054     |
| road          | 0.1393  | 0.005   | 0.0145     | 0.0017  | 0.002         | 0.0033  | 0.0068    | 0.0012       | 96.6601 | 0.2172  | 2.6688   | 0.0006       | 0.0158   | 0.0047  | 0.0024     | 0.0018  | 0.2528  | 0.002   | 0.0          | 87865888  |
| parking       | 0.4862  | 0.0232  | 0.0344     | 0.0077  | 0.0257        | 0.0029  | 0.0015    | 0.0004       | 9.1314  | 42.9761 | 43.1259  | 0.0197       | 0.0919   | 0.0203  | 0.0956     | 0.0076  | 3.7834  | 0.1658  | 0.0          | 5936039   |
| sidewalk      | 0.059   | 0.0276  | 0.009      | 0.0018  | 0.0062        | 0.0136  | 0.0061    | 0.0015       | 3.2551  | 4.8093  | 85.9245  | 0.0175       | 0.2088   | 0.4772  | 0.1599     | 0.0024  | 4.9908  | 0.0297  | 0.0          | 60128514  |
| other-ground  | 0.0799  | 0.0114  | 0.0562     | 0.0173  | 0.0433        | 0.1443  | 0.0018    | 0.0002       | 19.9695 | 0.6008  | 32.421   | 0.0134       | 1.7498   | 0.9001  | 15.088     | 0.0015  | 28.9004 | 0.0007  | 0.0004       | 455375    |
| building      | 0.7416  | 0.0356  | 0.0724     | 0.0666  | 0.9693        | 0.0348  | 0.0188    | 0.0017       | 0.0749  | 0.0146  | 0.368    | 0.0013       | 83.3289  | 4.7531  | 6.8764     | 1.084   | 1.419   | 0.0439  | 0.0951       | 55189249  |
| fence         | 0.1468  | 0.0201  | 0.0356     | 0.0457  | 0.8116        | 0.0124  | 0.004     | 0.0007       | 0.4743  | 0.0261  | 0.7996   | 0.0002       | 19.85    | 69.3224 | 6.0046     | 0.053   | 2.2811  | 0.1076  | 0.0042       | 12351781  |
| vegetation    | 1.0855  | 0.0378  | 0.0245     | 0.0109  | 0.1196        | 0.0803  | 0.0326    | 0.002        | 0.3861  | 0.0541  | 0.5083   | 0.0006       | 3.3073   | 0.846   | 87.6936    | 0.4084  | 5.271   | 0.1121  | 0.0193       | 140807952 |
| trunk         | 0.0908  | 0.0118  | 0.013      | 0.0145  | 0.0292        | 0.2788  | 0.2306    | 0.0109       | 0.0425  | 0.0009  | 0.0601   | 0.0021       | 4.9456   | 0.2006  | 14.6521    | 76.8452 | 1.5597  | 0.9566  | 0.0551       | 5390642   |
| terrain       | 0.0591  | 0.0113  | 0.0072     | 0.0078  | 0.1001        | 0.0356  | 0.007     | 0.0005       | 0.7848  | 0.3613  | 6.2436   | 0.0072       | 0.1006   | 0.6519  | 11.9256    | 0.1344  | 79.5345 | 0.0273  | 0.0002       | 63568928  |
| pole          | 0.2426  | 0.0967  | 0.0491     | 0.1526  | 0.118         | 0.2988  | 0.1395    | 0.0251       | 0.035   | 0.174   | 0.4938   | 0.0015       | 2.7239   | 1.2465  | 6.8068     | 6.367   | 1.3339  | 78.4918 | 1.2034       | 1647050   |
| traffic-sign  | 0.5606  | 0.1849  | 1.2552     | 5.6945  | 3.7493        | 1.7202  | 0.6421    | 0.2736       | 0.0233  | 0.0021  | 0.0062   | 0.0          | 5.8055   | 0.6887  | 3.3326     | 2.2427  | 0.0506  | 29.5941 | 44.1738      | 373165    |
+---------------+---------+---------+------------+---------+---------------+---------+-----------+--------------+---------+---------+----------+--------------+----------+---------+------------+---------+---------+---------+--------------+-----------+
